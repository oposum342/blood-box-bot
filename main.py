import os
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token="Api_token")
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
FIRMWARES_DIR = os.path.join(os.path.dirname(__file__), "files")
API_DIR = os.path.join(os.path.dirname(__file__), "api")

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì≤ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—à–∏–≤–∫—É")],
        [KeyboardButton(text="‚ö° –†—É—Ç-—Ñ–∞–π–ª—ã"), KeyboardButton(text="üìö –ì–∞–π–¥—ã")],
        [KeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ],
    resize_keyboard=True
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
def load_json_data(filename):
    try:
        with open(os.path.join(API_DIR, filename), "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception as e:
        logging.error(f"Error loading {filename}: {e}")
        return None

def load_firmwares():
    firmwares = {}
    for filename in os.listdir(FIRMWARES_DIR):
        if filename.endswith(".json"):
            brand = filename.split(".")[0].capitalize()
            try:
                with open(os.path.join(FIRMWARES_DIR, filename), "r", encoding="utf-8") as f:
                    data = json.load(f)
                    firmwares[brand] = data[brand][""]["versions"]
            except Exception as e:
                logging.error(f"Error loading {filename}: {e}")
    return firmwares

FIRMWARES = load_firmwares()

# ===================== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====================
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üîß –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ BloodBox - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ Android!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu
    )

# ===================== –†–ê–ó–î–ï–õ –ü–†–û–®–ò–í–û–ö =====================
@dp.message(lambda message: message.text == "üì≤ –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—à–∏–≤–∫—É")
async def firmware_menu(message: types.Message):
    brands = list(FIRMWARES.keys())
    keyboard = [
        [InlineKeyboardButton(text=brand, callback_data=f"brand_{brand}")]
        for brand in sorted(brands)
    ]
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(lambda c: c.data.startswith("brand_"))
async def process_brand(callback: types.CallbackQuery):
    brand = callback.data.split("_")[1]
    if brand not in FIRMWARES:
        await callback.answer("–ë—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    models = list(FIRMWARES[brand].keys())
    keyboard = [
        [InlineKeyboardButton(text=model, callback_data=f"model_{brand}_{model}")]
        for model in sorted(models)
    ]
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await callback.message.edit_text(
        f"üì± {brand} ‚Üí –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(lambda c: c.data.startswith("model_"))
async def process_model(callback: types.CallbackQuery):
    _, brand, model = callback.data.split("_")
    if brand not in FIRMWARES or model not in FIRMWARES[brand]:
        await callback.answer("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    firmwares = FIRMWARES[brand][model]["firmwares"]
    
    keyboard = []
    for idx, fw in enumerate(firmwares):
        btn_text = f"{fw['name']}"
        if "size" in fw:
            btn_text += f" ({fw['size']} MB)"
        keyboard.append(
            [InlineKeyboardButton(text=btn_text, callback_data=f"fw_{brand}_{model}_{idx}")]
        )
    
    keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –±—Ä–µ–Ω–¥–∞–º", callback_data=f"brand_{brand}"),
        InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
    ])
    
    await callback.message.edit_text(
        f"üì± {brand} ‚Üí {model}\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—à–∏–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(lambda c: c.data.startswith("fw_"))
async def show_firmware(callback: types.CallbackQuery):
    _, brand, model, fw_idx = callback.data.split("_")
    fw_idx = int(fw_idx)
    
    if brand not in FIRMWARES or model not in FIRMWARES[brand]:
        await callback.answer("–ü—Ä–æ—à–∏–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    firmwares = FIRMWARES[brand][model]["firmwares"]
    if fw_idx >= len(firmwares):
        await callback.answer("–ü—Ä–æ—à–∏–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    firmware = firmwares[fw_idx]
    
    text = f"üì± <b>{brand} {model}</b>\n\n"
    text += f"üîß <b>{firmware['name']}</b>\n\n"
    
    if "size" in firmware:
        text += f"üì¶ <b>–†–∞–∑–º–µ—Ä:</b> {firmware['size']} MB\n"
    if "description" in firmware:
        text += f"\n‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{firmware['description']}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ—à–∏–≤–∫—É", url=firmware["url"])],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—à–∏–≤–∫–∞–º", callback_data=f"model_{brand}_{model}"),
            InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
        ]
    ])
    
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

# ===================== –†–ê–ó–î–ï–õ –†–£–¢-–§–ê–ô–õ–û–í =====================
@dp.message(lambda message: message.text == "‚ö° –†—É—Ç-—Ñ–∞–π–ª—ã")
async def root_files_menu(message: types.Message):
    root_files = load_json_data("root_files.json")
    if not root_files:
        await message.answer("‚ö° –†—É—Ç-—Ñ–∞–π–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    keyboard = [
        [InlineKeyboardButton(text=rf["name"], callback_data=f"root_{idx}")]
        for idx, rf in enumerate(root_files)
    ]
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await message.answer(
        "‚ö° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä—É—Ç-—Ñ–∞–π–ª—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(lambda c: c.data.startswith("root_"))
async def show_root_file(callback: types.CallbackQuery):
    root_files = load_json_data("root_files.json")
    if not root_files:
        await callback.answer("–†—É—Ç-—Ñ–∞–π–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    rf = root_files[int(callback.data.split("_")[1])]
    
    text = f"‚ö° <b>{rf['name']}</b>\n\n"
    if "version" in rf:
        text += f"üîπ <b>–í–µ—Ä—Å–∏—è:</b> {rf['version']}\n"
    if "size" in rf:
        text += f"üì¶ <b>–†–∞–∑–º–µ—Ä:</b> {rf['size']} MB\n"
    if "description" in rf:
        text += f"\n‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{rf['description']}\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", url=rf["url"])],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_root")]
    ])
    
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML",
        disable_web_page_preview=True
    )

# ===================== –†–ê–ó–î–ï–õ –ì–ê–ô–î–û–í =====================
@dp.message(lambda message: message.text == "üìö –ì–∞–π–¥—ã")
async def guides_menu(message: types.Message):
    guides = load_json_data("guides.json")
    if not guides:
        await message.answer("üìö –ì–∞–π–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    keyboard = [
        [InlineKeyboardButton(text=guide["title"], callback_data=f"guide_{idx}")]
        for idx, guide in enumerate(guides)
    ]
    keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    
    await message.answer(
        "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–∞–π–¥—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )

@dp.callback_query(lambda c: c.data.startswith("guide_"))
async def show_guide(callback: types.CallbackQuery):
    guides = load_json_data("guides.json")
    if not guides:
        await callback.answer("–ì–∞–π–¥—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
        return
    
    guide = guides[int(callback.data.split("_")[1])]
    
    text = f"üìñ <b>{guide['title']}</b>\n\n"
    if "description" in guide:
        text += f"üîπ {guide['description']}\n\n"
    text += guide["content"]
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_guides")]
    ])
    
    await callback.message.edit_text(
        text=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# ===================== –†–ê–ó–î–ï–õ –ü–û–î–î–ï–†–ñ–ö–ò =====================
@dp.message(lambda message: message.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: types.Message):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    await message.answer(
        "üõ† <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @stopscam_vbn\n\n"
        "–ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:\n"
        "1. –ú–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
        "2. –í–µ—Ä—Å–∏—é –ø—Ä–æ—à–∏–≤–∫–∏ (–µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –Ω–µ–π)\n"
        "3. –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
        reply_markup=markup,
        parse_mode="HTML"
    )

# ===================== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö "–ù–ê–ó–ê–î" =====================
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu
    )
    await callback.message.delete()
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_root")
async def back_to_root_menu(callback: types.CallbackQuery):
    await root_files_menu(callback.message)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_to_guides")
async def back_to_guides_menu(callback: types.CallbackQuery):
    await guides_menu(callback.message)
    await callback.answer()

# ===================== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====================
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    dp.run_polling(bot)
